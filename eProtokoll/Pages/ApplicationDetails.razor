@page "/appDetails/{appId}"
@inject IApplicationService _appService
@inject NavigationManager _navmanager
@inject IAuthenticationServices _auth
@inject IApplicationConfigurationService _appConfig
@using System.IO
@using Microsoft.JSInterop
@inject IJSRuntime JS


<h3>@apps.appName</h3>

<div class="container">
    <ul class="list-group">
        <li class="list-group-item disabled">Aplikimi:  <span style="right:auto"> @apps.appName</span></li>
        <li class="list-group-item">Data e aplikimit: <span style="right:auto">@apps.appDate </span></li>
        <li class="list-group-item">Institucioni i aplikimit:  <span style="right:auto">@apps.institution?.name </span></li>
        <li class="list-group-item">Statusi: <span style="right:auto">  @apps.status </span></li>
        <li class="list-group-item">Tipi: <span style="right:auto">@apps.type?.name </span></li>

    </ul>
</div>
<div class="input-group">
    @if (documentDtos.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">emri i dokumentit</th>
                    <th scope="col"></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var i in documentDtos)
                {
                    var nr = 1;
                    <tr>
                        <th scope="row">@nr++</th>
                        <td> @i.name</td>
                        <td>
                            <input type="button" @onclick="@(() => Remove(i))" class="btn btn-link" value="X" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<div class="row text-center" style="margin-top:10px">
    <div class="col">
        @(aprove)

    </div>
    <div class="col">
        @(refuse)
    </div>

    <div class="col">

        <input type="button" @onclick="@(() => ShowAproveMovie(apps.appId))" class="btn btn-primary" value="Kalo ne hapin tjeter" />
    </div>

    @*@if (apps.createdBy != UsersDto.id)
        {
            <div class="col">

                <input type="button" @onclick="@(() => ShowAproveMovie(apps.appId))" class="btn btn-primary" value="Kalo ne hapin tjeter" />
            </div>
        }
        @if (apps.createdBy != UsersDto.id)
        {
            <div class="col">
                <input type="button" @onclick="@(() => ShowRefuzeApplication(apps.appId))" class="btn btn-danger" value="Kthe per shqyrtim" />
            </div>
        }*@

</div>


@code {
    [Parameter]
    public string appId { get; set; }

    string id { get; set; }

    private MarkupString aprove;
    MarkupString refuse = new MarkupString();
    private ApplicationRequestDto apps = new();
    private List<DocumentDto> documentDtos = new();
    private UserApplicationsRequestDto userApplications = new();

    private bool showModal = false;
    ModalOptions options = new ModalOptions()
    {
        HideCloseButton = false
    };
    UsersDto UsersDto = new UsersDto();
    Dictionary<string, string> divs = new();



    protected override async Task OnInitializedAsync()
    {
        int.TryParse(appId, out int newId);
        userApplications = await _appService.GetApplicationDetailsAsync(newId);

        apps = userApplications.applicationDto;
        UsersDto = await _auth.GetLocalUser();
        string a = _appConfig.GetApplicationAproveButtonByRole(UsersDto.role, apps.appId);
        string b = _appConfig.GetApplicationRefuseButtonByRole(UsersDto.role, apps.appId);
        var html = Markdig.Markdown.ToHtml(a);

        //Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilde

        aprove = ((MarkupString)html);
        refuse = new MarkupString(b);
        documentDtos = userApplications.documentDtos;

    }

    [CascadingParameter] public IModalService Modal { get; set; }

    private async void Remove(DocumentDto index)
    {
        var fileStream = new MemoryStream(index.bytes);
        //using var streamRef = new DotNetStreamReference( fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", index.name, fileStream);
    }


    void ShowEditMovie(int movieId)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(EditApplication.apps), apps);

        //       await GetAppsConfigs();
        // parameters.Add(nameof(EditApplication.ListOfApplicationCofigs), ListOfApplicationCofigs);


        Modal.Show<EditApplication>("EditApplication", parameters);
    }

    void ShowRefuzeApplication(int id)
    {
        var parameters = new ModalParameters();


        parameters.Add(nameof(RefuseModal.requestDto), userApplications);

        Modal.Show<RefuseModal>("Refuse", parameters, options);
    }
    void ShowAproveMovie(int id)
    {
        var parameters = new ModalParameters();


        parameters.Add(nameof(AproveModal.userApp), userApplications);

        Modal.Show<AproveModal>("Aprove", parameters, options);
    }

}
