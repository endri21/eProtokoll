@page "/appDetails/{appId}"
@inject IApplicationService _appService
@inject NavigationManager _navmanager
@inject IAuthenticationServices _auth
@inject IApplicationConfigurationService _appConfig
@using System.IO
@inject IJavascriptCaller jscaller

<style>
    .icon {
        width: 30px;
        height: 30px;
    }
</style>

<RadzenCard>
    <h3>Detajet e aplikimit</h3>
    <RadzenTabs Change=@OnChange TabPosition="TabPosition.Top" style="height: 504px; width: 100%; margin: 20px auto;" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Te dhenat e aplikimit">
                <Radzen.Blazor.RadzenCard>
                    @apps?.appName
                </Radzen.Blazor.RadzenCard>
                <Radzen.Blazor.RadzenCard>
                    @apps?.appDate
                </Radzen.Blazor.RadzenCard>
                <Radzen.Blazor.RadzenCard>
                    @apps?.institution?.name
                </Radzen.Blazor.RadzenCard>
                <Radzen.Blazor.RadzenCard>
                    @apps?.status
                </Radzen.Blazor.RadzenCard>
                <Radzen.Blazor.RadzenCard>
                    @apps?.type?.name
                </Radzen.Blazor.RadzenCard>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Historiku i aplikimit">
                <RadzenCard>
                    Historiku i aplikimit
                </RadzenCard>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Dokumentat e aplikimit">

                @if (documentDtos != null)
                {
                    <table class="table" style="margin-top:10px">

                        <tbody>
                            @foreach (var i in documentDtos)
                            {
                                <tr>
                                    <td>
                                        @switch (i.extention)
                                        {
                                            case "application/excel":

                                                <img src="../img/powerpoint.png" class="icon" />
                                                break;

                                            case "application/pdf":
                                                <img src="../img/powerpoint.png" class="icon" />
                                                break;
                                            case "application/msword":
                                                <img src="../img/powerpoint.png" class="icon" />
                                                break;
                                            default:

                                                break;
                                        }
                                    </td>
                                    <td>@i.name</td>
                                    <td>
                                        <div style="cursor:pointer; text-align:center">
                                            <RadzenIcon Icon="get_app" @onclick="(()=>Download(i))" />
                                        </div>
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>
                }


            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</RadzenCard>
@code {
    [Parameter]
    public string appId { get; set; }

    string id { get; set; }

    private MarkupString aprove;
    MarkupString refuse = new MarkupString();
    private ApplicationRequestDto apps = new();
    private List<DocumentDto> documentDtos = new();
    private UserApplicationsRequestDto userApplications = new();

    private bool showModal = false;
    ModalOptions options = new ModalOptions()
    {
        HideCloseButton = false
    };
    UsersDto UsersDto = new UsersDto();
    Dictionary<string, string> divs = new();

    async void showHide()
    {
        await jscaller.Show("headingTwo");

    }
    void OnChange(int index)
    {
        ///console.Log($"Tab with index {index} was selected.");
    }
    protected override async Task OnInitializedAsync()
    {
        int.TryParse(appId, out int newId);
        userApplications = await _appService.GetApplicationDetailsAsync(newId);

        apps = userApplications.applicationDto;
        UsersDto = await _auth.GetLocalUser();
        string a = _appConfig.GetApplicationAproveButtonByRole(UsersDto.role, apps.appId);
        string b = _appConfig.GetApplicationRefuseButtonByRole(UsersDto.role, apps.appId);
        var html = Markdig.Markdown.ToHtml(a);

        aprove = ((MarkupString)html);
        refuse = new MarkupString(b);
        documentDtos = userApplications.documentDtos;

    }

    [CascadingParameter] public IModalService Modal { get; set; }

    private async void Download(DocumentDto index)
    {
        var fileStream = new MemoryStream(index.bytes);

        await jscaller.DownloadFile(index.name, fileStream);

    }


    void ShowEditMovie(int movieId)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(EditApplication.apps), apps);

        //       await GetAppsConfigs();
        // parameters.Add(nameof(EditApplication.ListOfApplicationCofigs), ListOfApplicationCofigs);
        Modal.Show<EditApplication>("EditApplication", parameters);
    }



    void ShowRefuzeApplication(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(RefuseModal.requestDto), userApplications);
        Modal.Show<RefuseModal>("Refuse", parameters, options);
    }
    void ShowAproveMovie(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AproveModal.userApp), userApplications);
        Modal.Show<AproveModal>("Aprove", parameters, options);
    }

}
