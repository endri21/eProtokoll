@layout LoginLayout
@page "/"
@inject IAuthenticationServices _authservice
@inject NavigationManager _navmanager
@inject IJSRuntime JsRuntime



<style>
    .body {
        display: flex;
        -ms-flex-align: center;
        -ms-flex-pack: center;
        -webkit-box-align: center;
        align-items: center;
        -webkit-box-pack: center;
        justify-content: center;
        padding-top: 40px;
        padding-bottom: 40px;
    }
</style>
<div class="body">
    <EditForm Model="model" OnValidSubmit="ExecuteLogin" class="form-signin">
        <div class="text-center mb-4">

            <h1 class="h3 mb-3 font-weight-normal">Login</h1>

        </div>
        <div class="form-label-group">
            <label for="inputEmail">Email address</label>
            <input type="text" id="inputEmail" class="form-control" @bind-value="model.username" autofocus="">
        </div>

        <div class="form-label-group">
            <label for="inputPassword">Password</label>
            <input type="password" id="inputPassword" class="form-control" @bind-value="model.password" required="">
        </div>
        <div class="form-label-group" style="margin-top:10px">
            <button class="btn btn-lg btn-primary btn-block" @onclick="ExecuteLogin" type="button">Sign in</button>
        </div>
        <p class="mt-5 mb-3 text-muted text-center">© Endri Isufi</p>
    </EditForm>
</div>


@code {
    private LoginRequest model = new();
    private bool showErrorMessage = false;
    private string errorMessage = "";
    [CascadingParameter] public IModalService Modal { get; set; }

    private async Task ExecuteLogin()
    {
        var result = await _authservice.Login(model);

        if (!result.success)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(Components.ErrorComponent.message), result.errorMessage);
            Modal.Show<Components.ErrorComponent>("Error", parameters);
        }
        else
        {
            _navmanager.NavigateTo($"/dashboard");
        }
    }
}
